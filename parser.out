Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME EQUALS TYPE
Rule 2     statement -> NAME EQUALS expression
Rule 3     statement -> expression
Rule 4     expression -> expression PLUS expression
Rule 5     expression -> expression MINUS expression
Rule 6     expression -> expression TIMES expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> expression AND expression
Rule 9     expression -> MINUS expression
Rule 10    expression -> LPAREN expression RPAREN
Rule 11    expression -> NUMBA
Rule 12    expression -> COM WURD COM
Rule 13    expression -> NAME

Terminals, with rules where they appear

AND                  : 8
COM                  : 12 12
DIVIDE               : 7
EQUALS               : 1 2
LPAREN               : 10
MINUS                : 5 9
NAME                 : 1 2 13
NUMBA                : 11
PLUS                 : 4
RPAREN               : 10
TIMES                : 6
TYPE                 : 1
WURD                 : 12
error                : 

Nonterminals, with rules where they appear

expression           : 2 3 4 4 5 5 6 6 7 7 8 8 9 10
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME EQUALS TYPE
    (2) statement -> . NAME EQUALS expression
    (3) statement -> . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    NAME            shift and go to state 2
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NAME . EQUALS TYPE
    (2) statement -> NAME . EQUALS expression
    (13) expression -> NAME .

    EQUALS          shift and go to state 8
    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    TIMES           reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    AND             reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)


state 3

    (3) statement -> expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    $end            reduce using rule 3 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    AND             shift and go to state 13


state 4

    (9) expression -> MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 14

state 5

    (10) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 16

state 6

    (11) expression -> NUMBA .

    PLUS            reduce using rule 11 (expression -> NUMBA .)
    MINUS           reduce using rule 11 (expression -> NUMBA .)
    TIMES           reduce using rule 11 (expression -> NUMBA .)
    DIVIDE          reduce using rule 11 (expression -> NUMBA .)
    AND             reduce using rule 11 (expression -> NUMBA .)
    $end            reduce using rule 11 (expression -> NUMBA .)
    RPAREN          reduce using rule 11 (expression -> NUMBA .)


state 7

    (12) expression -> COM . WURD COM

    WURD            shift and go to state 17


state 8

    (1) statement -> NAME EQUALS . TYPE
    (2) statement -> NAME EQUALS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    TYPE            shift and go to state 18
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 19

state 9

    (4) expression -> expression PLUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 20

state 10

    (5) expression -> expression MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 21

state 11

    (6) expression -> expression TIMES . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 22

state 12

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 23

state 13

    (8) expression -> expression AND . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression AND expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBA
    (12) expression -> . COM WURD COM
    (13) expression -> . NAME

    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBA           shift and go to state 6
    COM             shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 24

state 14

    (9) expression -> MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    PLUS            reduce using rule 9 (expression -> MINUS expression .)
    MINUS           reduce using rule 9 (expression -> MINUS expression .)
    TIMES           reduce using rule 9 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 9 (expression -> MINUS expression .)
    AND             reduce using rule 9 (expression -> MINUS expression .)
    $end            reduce using rule 9 (expression -> MINUS expression .)
    RPAREN          reduce using rule 9 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! AND             [ shift and go to state 13 ]


state 15

    (13) expression -> NAME .

    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    TIMES           reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    AND             reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    RPAREN          reduce using rule 13 (expression -> NAME .)


state 16

    (10) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    AND             shift and go to state 13


state 17

    (12) expression -> COM WURD . COM

    COM             shift and go to state 26


state 18

    (1) statement -> NAME EQUALS TYPE .

    $end            reduce using rule 1 (statement -> NAME EQUALS TYPE .)


state 19

    (2) statement -> NAME EQUALS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    $end            reduce using rule 2 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    AND             shift and go to state 13


state 20

    (4) expression -> expression PLUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    PLUS            reduce using rule 4 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 4 (expression -> expression PLUS expression .)
    AND             reduce using rule 4 (expression -> expression PLUS expression .)
    $end            reduce using rule 4 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! AND             [ shift and go to state 13 ]


state 21

    (5) expression -> expression MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    AND             reduce using rule 5 (expression -> expression MINUS expression .)
    $end            reduce using rule 5 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! AND             [ shift and go to state 13 ]


state 22

    (6) expression -> expression TIMES expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    PLUS            reduce using rule 6 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 6 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 6 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 6 (expression -> expression TIMES expression .)
    AND             reduce using rule 6 (expression -> expression TIMES expression .)
    $end            reduce using rule 6 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 6 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! AND             [ shift and go to state 13 ]


state 23

    (7) expression -> expression DIVIDE expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! AND             [ shift and go to state 13 ]


state 24

    (8) expression -> expression AND expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . AND expression

    PLUS            reduce using rule 8 (expression -> expression AND expression .)
    MINUS           reduce using rule 8 (expression -> expression AND expression .)
    AND             reduce using rule 8 (expression -> expression AND expression .)
    $end            reduce using rule 8 (expression -> expression AND expression .)
    RPAREN          reduce using rule 8 (expression -> expression AND expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 8 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! AND             [ shift and go to state 13 ]


state 25

    (10) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)


state 26

    (12) expression -> COM WURD COM .

    PLUS            reduce using rule 12 (expression -> COM WURD COM .)
    MINUS           reduce using rule 12 (expression -> COM WURD COM .)
    TIMES           reduce using rule 12 (expression -> COM WURD COM .)
    DIVIDE          reduce using rule 12 (expression -> COM WURD COM .)
    AND             reduce using rule 12 (expression -> COM WURD COM .)
    $end            reduce using rule 12 (expression -> COM WURD COM .)
    RPAREN          reduce using rule 12 (expression -> COM WURD COM .)

